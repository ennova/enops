#!/usr/bin/env ruby

require 'io/console'
require 'fileutils'
require 'digest/md5'
require 'json'
require 'time'

def cache_path(key)
  cache_dir = File.expand_path('~/.aws/enops/cache')
  FileUtils.mkdir_p cache_dir
  "#{cache_dir}/#{Digest::MD5.hexdigest key}.json"
end

def cache_read(key)
  path = cache_path(key)
  if File.exists?(path)
    JSON.parse(File.read(path))
  end
end

def cache_write(key, value)
  path = cache_path(key)
  File.write path, JSON.dump(value)
end

def credentials_valid?(data)
  !data.nil? && Time.parse(data.fetch('Expiration')) > (Time.now + 60 * 15)
end

def cache_credentials(cache_key)
  data = cache_read(cache_key)

  unless credentials_valid?(data)
    data = yield
    cache_write cache_key, data
  end

  data
end

def run(*args, nil_on_error: true)
  result = IO.popen(*args, &:read).chomp
  return nil if nil_on_error && !$?.success?
  exit $?.exitstatus unless $?.success?
  result
end

def read_password(msg = 'Password')
  tty = File.open('/dev/tty', 'r+')
  tty.write "#{msg}: "
  tty.noecho(&:gets).chomp
rescue Interrupt
  exit 130
ensure
  tty&.write "\n"
  tty&.close
end

def get_access_key_id(aws_profile)
  access_key_id = run(%W[aws configure get aws_access_key_id --profile #{aws_profile}], nil_on_error: true)

  unless access_key_id
    if credential_process = run(%W[aws configure get credential_process --profile #{aws_profile}], nil_on_error: true)
      unless credential_process =~ %r{^/[^ ]+/enops/[^ ]+/aws_cli_credential_process mfa (\w+) }
        STDERR.puts "Unknown credential_process: #{credential_process.inspect}"
        exit 1
      end

      return get_access_key_id($1)
    end
  end

  unless access_key_id
    STDERR.puts "Error retrieving access key for profile #{aws_profile.inspect}."
    exit 1
  end

  access_key_id
end

def usage
  STDERR.puts "Usage: #{File.basename $0} mfa <profile-name> <mfa-serial-number>"
  STDERR.puts "Usage: #{File.basename $0} assume-role <profile-name> <role-arn>"
  exit 1
end

case ARGV[0]
when 'mfa'
  usage unless ARGV.size == 3
  aws_profile = ARGV[1]
  mfa_serial_number = ARGV[2]

  access_key_id = get_access_key_id(aws_profile)

  data = cache_credentials "#{access_key_id}:#{mfa_serial_number}" do
    mfa_token = read_password("Enter MFA code for #{mfa_serial_number}")

    json = run(%W[aws sts get-session-token --profile #{aws_profile} --serial-number #{mfa_serial_number} --token-code #{mfa_token}])
    {'Version' => 1}.merge(JSON.parse(json).fetch('Credentials'))
  end

  puts JSON.pretty_generate(data)
when 'assume-role'
  usage unless ARGV.size == 3
  aws_profile = ARGV[1]
  role_arn = ARGV[2]

  access_key_id = get_access_key_id(aws_profile)
  role_session_name = "enops-session-#{Time.now.to_i}"

  data = cache_credentials "#{access_key_id}:#{role_arn}" do
    json = run(%W[aws sts assume-role --profile #{aws_profile} --role-arn #{role_arn} --role-session-name #{role_session_name}])
    {'Version' => 1}.merge(JSON.parse(json).fetch('Credentials'))
  end

  puts JSON.pretty_generate(data)
else
  usage
end
