#!/bin/bash
set -euo pipefail

_self() {
  basename "$0"
}

_error() {
  echo "$(_self): $*" >&2
  exit 1
}

_usage() {
  echo "Usage: $(_self): <URL|file.dump>" >&2
  exit 1
}

URL=

while [ $# -gt 0 ]; do
  case "$1" in
    -*)
      _error "Unknown option: $1"
      ;;
    *)
      if [ -n "$URL" ]; then
        _usage
      fi
      URL="$1"
      ;;
  esac
  shift
done

if [ -z "$URL" ]; then
  _usage
fi

if echo "$URL" | grep -q ://; then
  TEMP_DATA_FILE="$(mktemp -t enops-restore-data.XXXXXX)"
  wget -O "$TEMP_DATA_FILE" "$URL"
  DATA_FILE="$TEMP_DATA_FILE"
else
  TEMP_DATA_FILE=
  DATA_FILE="$URL"
fi

LIST_FILE="$(mktemp -t enops-restore-list.XXXXXX)"
pg_restore -l "$DATA_FILE" | egrep -v '; 0 0 (ACL|DATABASE PROPERTIES|COMMENT - EXTENSION) ' > "$LIST_FILE"

echo Resetting...
if [ "$(PGOPTIONS="--client-min-messages=warning" psql -XtAq -v ON_ERROR_STOP=1 "$DATABASE_URL" -c "select current_setting('is_superuser')")" == on ]; then
  DATABASE_NAME="$(basename "$DATABASE_URL")"
  dropdb --if-exists "$DATABASE_NAME"
  createdb "$DATABASE_NAME"
else
  PGUSER="$(echo "${DATABASE_URL}" | ruby -ruri -e 'puts URI.parse(STDIN.read.chomp).user')"
  PGOPTIONS='--client-min-messages=warning' psql -X -q -v ON_ERROR_STOP=1 "${DATABASE_URL}" -c "DROP OWNED BY ${PGUSER} CASCADE; CREATE SCHEMA public;"
fi

echo Restoring...
pg_restore --jobs=4 --no-acl --no-owner --dbname "${DATABASE_URL}" --exit-on-error -L "$LIST_FILE" "$DATA_FILE"

echo Done.
rm -f "$TEMP_DATA_FILE" "$LIST_FILE"
